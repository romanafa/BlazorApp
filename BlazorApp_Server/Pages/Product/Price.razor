@page "/product/price/{Id:int}"

@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository

<h3 class="card-title text-primary mb-3 ml-3">Priser</h3>
@if (IsLoading)
{
    <div class="text-center">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.ProductName</h4>
                <span> Kategori: @Product.Category.Name</span>
                <br/>
                Beskrivelse: 
                <span> @((MarkupString)Product.Description)</span>
            </div>
        </div>
        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100">
        </div>
    </div>

    <SfGrid @ref="priceGrid" DataSource="@Prices" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>{"Add", "Edit","Update", "Delete", "Cancel"})">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDto"></GridEvents>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="true"></GridPageSettings>

        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDto.PriceId) HeaderText="ID"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDto.Size) HeaderText="Størrelse">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" TItem="string" TValue="string" @bind-Value="((context as ProductPriceDto).Size)">
                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDto.Price) HeaderText="Pris" Format="C2" ></GridColumn>

             <GridColumn HeaderText="" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDto Product { get; set; } = new();
    private IEnumerable<ProductPriceDto> Prices { get; set; } = new List<ProductPriceDto>();
    public bool IsLoading { get; set; } = true;
    public SfGrid<ProductPriceDto> priceGrid;

    IEnumerable<String> SizeList = new List<String>()
    {
        "One Size" ,"XS", "S", "M", "L", "XL"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.GetById(Id);
            Prices = await _productPriceRepository.GetAllPrices(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    //functionality for grid table
    public async void ActionHandler(ActionEventArgs<ProductPriceDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if (args.Action == "Add")
            {
                await _productPriceRepository.Create(args.Data);
                Prices = await _productPriceRepository.GetAllPrices(Id);
                priceGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await _productPriceRepository.Update(args.Data);
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.PriceId);
            priceGrid.Refresh();
        }
    }
}
