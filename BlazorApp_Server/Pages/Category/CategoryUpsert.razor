@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title</h3>

    <div class="col-4">
        @if(IsLoading)
        {
            <div class="text-center" style="text-align:center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Navn</label>
                    <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">Lagre</button>
                    <NavLink href="category" class="btn btn-secondary">Tilbake</NavLink>
                </div>
            </EditForm>
        }     
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private CategoryDto Category { get; set; } = new CategoryDto();
    private string Title { get; set; } = "Ny kategori";
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if(Id == 0)
        {
            IsLoading = false;
        }
        else
        {
            Title = "Rediger kategori";
            await Task.Run(LoadCategory);
        }

    }

    private void LoadCategory()
    {
        Category = _categoryRepository.GetById(Id);
        IsLoading = false;
    }

    private void UpsertCategory()
    {
        if(Category.Id == 0)
        {
            _categoryRepository.Create(Category);
        }
        else
        {
            _categoryRepository.Update(Category);    
        }
        _navigationManager.NavigateTo("category");
    }
}
